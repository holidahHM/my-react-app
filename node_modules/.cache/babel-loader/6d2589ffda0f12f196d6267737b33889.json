{"remainingRequest":"/home/mulama/Desktop/NewFolder/osl/node_modules/babel-loader/lib/index.js!/home/mulama/Desktop/NewFolder/osl/node_modules/eslint-loader/index.js??ref--13-0!/home/mulama/Desktop/NewFolder/osl/src/service/insuranceErrors.js","dependencies":[{"path":"/home/mulama/Desktop/NewFolder/osl/src/service/insuranceErrors.js","mtime":1627657448152},{"path":"/home/mulama/Desktop/NewFolder/osl/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mulama/Desktop/NewFolder/osl/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/mulama/Desktop/NewFolder/osl/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9tdWxhbWEvRGVza3RvcC9OZXdGb2xkZXIvb3NsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9tdWxhbWEvRGVza3RvcC9OZXdGb2xkZXIvb3NsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKCnZhciBpbnN1cmFuY2VFcnJvcnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIGluc3VyYW5jZUVycm9ycygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBpbnN1cmFuY2VFcnJvcnMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKGluc3VyYW5jZUVycm9ycywgbnVsbCwgW3sKICAgIGtleTogImdldEVycm9yTWVzc2FnZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZXMoZXJyQ29kZSkgewogICAgICBzd2l0Y2ggKGVyckNvZGUpIHsKICAgICAgICBjYXNlIDQwMToKICAgICAgICAgIHJldHVybiAnRmFpbGVkISBwbGVhc2UgaW5wdXQgcHJvZHVjdCBuYW1lJzsKCiAgICAgICAgY2FzZSA0MDI6CiAgICAgICAgICByZXR1cm4gJ0ZhaWxlZCEgRGF0YSBleGlzdHMgaW4gdGhlIGRhdGFiYXNlJzsKCiAgICAgICAgY2FzZSA0MDM6CiAgICAgICAgICByZXR1cm4gJ0ZhaWxlZCEgaW52YWxpZCBkYXRhIHR5cGVzJzsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiAndW5leHBlY3RlZCBlcnJvcic7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRFcnJvckludGVybmFsVXNlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RXJyb3JJbnRlcm5hbFVzZXIoZXJyb3JDb2RlKSB7CiAgICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7CiAgICAgICAgY2FzZSA0MDE6CiAgICAgICAgICByZXR1cm4gJ0ZhaWxlZCEgcGxlYXNlIGlucHV0IHVzZXJuYW1lJzsKCiAgICAgICAgY2FzZSA0MDI6CiAgICAgICAgICByZXR1cm4gJ0ZhaWxlZCEgRGF0YSBleGlzdHMgaW4gdGhlIGRhdGFiYXNlJzsKCiAgICAgICAgY2FzZSA0MDM6CiAgICAgICAgICByZXR1cm4gJ0ZhaWxlZCEgaW52YWxpZCBkYXRhIHR5cGVzJzsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiAndW5leHBlY3RlZCBlcnJvcic7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRFcnJvckV4dGVybmFsVXNlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RXJyb3JFeHRlcm5hbFVzZXIoZXJyb3JDb2RlcykgewogICAgICBzd2l0Y2ggKGVycm9yQ29kZXMpIHsKICAgICAgICBjYXNlIDQwMToKICAgICAgICAgIHJldHVybiAnRmFpbGVkISBwbGVhc2UgaW5wdXQgdXNlcm5hbWUnOwoKICAgICAgICBjYXNlIDQwMjoKICAgICAgICAgIHJldHVybiAnRmFpbGVkISBEYXRhIGV4aXN0cyBpbiB0aGUgZGF0YWJhc2UnOwoKICAgICAgICBjYXNlIDQwMzoKICAgICAgICAgIHJldHVybiAnRmFpbGVkISBpbnZhbGlkIGRhdGEgdHlwZXMnOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuICd1bmV4cGVjdGVkIGVycm9yJzsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImdldEVycm9yc0xlYWRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFcnJvcnNMZWFkcyhlcnJvckNvZGVMZWFkKSB7CiAgICAgIHN3aXRjaCAoZXJyb3JDb2RlTGVhZCkgewogICAgICAgIGNhc2UgNDAxOgogICAgICAgICAgcmV0dXJuICdGYWlsZWQhIHBsZWFzZSBsZWFkIG5hbWUnOwoKICAgICAgICBjYXNlIDQwMjoKICAgICAgICAgIHJldHVybiAnRmFpbGVkISBEYXRhIGV4aXN0cyBpbiB0aGUgZGF0YWJhc2UnOwoKICAgICAgICBjYXNlIDQwMzoKICAgICAgICAgIHJldHVybiAnZmFpbGVkIHRvIHJlZ2lzdGVyIGxlYWQgYmVjYXVzZSBhIGxlYWQgd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzJzsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiAndW5leHBlY3RlZCBlcnJvcic7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRFcnJvcnNQcm9zcGVjdHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVycm9yc1Byb3NwZWN0cyhlcnJvckNvZGVQcm9zcGVjdHMpIHsKICAgICAgc3dpdGNoIChlcnJvckNvZGVQcm9zcGVjdHMpIHsKICAgICAgICBjYXNlIDQwMToKICAgICAgICAgIHJldHVybiAnUHJvc3BlY3QgcmVnaXN0cmF0aW9uIGZhaWxlZC4gUGxlYXNlIGlucHV0IHByb3NwZWN0bmFtZSAnOwoKICAgICAgICBjYXNlIDQwMjoKICAgICAgICAgIHJldHVybiAnRmFpbGVkISBpbnZhbGlkIGRhdGEgdHlwZXMnOwoKICAgICAgICBjYXNlIDQwMzoKICAgICAgICAgIHJldHVybiAnZmFpbGVkIHRvIHJlZ2lzdGVyIHByb3NwZWN0IGJlY2F1c2UgYSBwcm9zcGVjdCB3aXRoIHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHMnOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuICd1bmV4cGVjdGVkIGVycm9yJzsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImdldFJlcXVlc3RQYXJhbXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlcXVlc3RQYXJhbXMoc2VhcmNoVGl0bGUsIHNlbExpbWl0LCBzdGF0dXMpIHsKICAgICAgdmFyIHBhcmFtcyA9IHt9OwoKICAgICAgaWYgKHNlYXJjaFRpdGxlKSB7CiAgICAgICAgcGFyYW1zWyJxIl0gPSBzZWFyY2hUaXRsZTsKICAgICAgfQoKICAgICAgaWYgKHNlbExpbWl0KSB7CiAgICAgICAgcGFyYW1zWyJsaW1pdCJdID0gc2VsTGltaXQ7CiAgICAgIH0KCiAgICAgIGlmIChzdGF0dXMpIHsKICAgICAgICBwYXJhbXNbImNsYWltX3N0YXR1cyJdID0gc3RhdHVzOwogICAgICB9CgogICAgICByZXR1cm4gcGFyYW1zOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIGluc3VyYW5jZUVycm9yczsKfSgpOwoKZXhwb3J0IHsgaW5zdXJhbmNlRXJyb3JzIGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["/home/mulama/Desktop/NewFolder/osl/src/service/insuranceErrors.js"],"names":["insuranceErrors","errCode","errorCode","errorCodes","errorCodeLead","errorCodeProspects","searchTitle","selLimit","status","params"],"mappings":";;;IAAqBA,e;;;;;;;WACjB,0BAAwBC,OAAxB,EAAiC;AAC7B,cAAQA,OAAR;AACI,aAAK,GAAL;AACI,iBAAO,mCAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,qCAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,4BAAP;;AACJ;AACI,iBAAO,kBAAP;AARR;AAUH;;;WACD,8BAA4BC,SAA5B,EAAuC;AACnC,cAAQA,SAAR;AACI,aAAK,GAAL;AACI,iBAAO,+BAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,qCAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,4BAAP;;AACJ;AACI,iBAAO,kBAAP;AARR;AAUH;;;WAED,8BAA4BC,UAA5B,EAAuC;AACnC,cAAQA,UAAR;AACI,aAAK,GAAL;AACI,iBAAO,+BAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,qCAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,4BAAP;;AACJ;AACI,iBAAO,kBAAP;AARR;AAUH;;;WAED,wBAAsBC,aAAtB,EAAoC;AAChC,cAAQA,aAAR;AACI,aAAK,GAAL;AACI,iBAAO,0BAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,qCAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,0EAAP;;AACJ;AACI,iBAAO,kBAAP;AARR;AAUH;;;WAED,4BAA0BC,kBAA1B,EAA6C;AACzC,cAAQA,kBAAR;AACI,aAAK,GAAL;AACI,iBAAO,0DAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,4BAAP;;AACJ,aAAK,GAAL;AACI,iBAAO,kFAAP;;AACJ;AACI,iBAAO,kBAAP;AARR;AAUH;;;WACD,0BAAwBC,WAAxB,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuD;AACrD,UAAIC,MAAM,GAAG,EAAb;;AAEA,UAAIH,WAAJ,EAAiB;AACfG,QAAAA,MAAM,CAAC,GAAD,CAAN,GAAcH,WAAd;AACD;;AAED,UAAIC,QAAJ,EAAc;AACZE,QAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBF,QAAlB;AACD;;AACD,UAAIC,MAAJ,EAAY;AACRC,QAAAA,MAAM,CAAC,cAAD,CAAN,GAAyBD,MAAzB;AACH;;AAED,aAAOC,MAAP;AACD;;;;;;SA/EgBT,e","sourcesContent":["export default class insuranceErrors{\n    static getErrorMessages(errCode) {\n        switch (errCode) {\n            case 401:\n                return 'Failed! please input product name';\n            case 402:\n                return 'Failed! Data exists in the database';\n            case 403:\n                return 'Failed! invalid data types';\n            default:\n                return 'unexpected error';\n        }\n    }\n    static getErrorInternalUser(errorCode) {\n        switch (errorCode) {\n            case 401:\n                return 'Failed! please input username';\n            case 402:\n                return 'Failed! Data exists in the database';\n            case 403:\n                return 'Failed! invalid data types';\n            default:\n                return 'unexpected error';\n        }\n    }\n\n    static getErrorExternalUser(errorCodes){\n        switch (errorCodes) {\n            case 401:\n                return 'Failed! please input username';\n            case 402:\n                return 'Failed! Data exists in the database';\n            case 403:\n                return 'Failed! invalid data types';\n            default:\n                return 'unexpected error';\n        }\n    }\n\n    static getErrorsLeads(errorCodeLead){\n        switch (errorCodeLead) {\n            case 401:\n                return 'Failed! please lead name';\n            case 402:\n                return 'Failed! Data exists in the database';\n            case 403:\n                return 'failed to register lead because a lead with the same name already exists';\n            default:\n                return 'unexpected error';\n        }\n    }\n\n    static getErrorsProspects(errorCodeProspects){\n        switch (errorCodeProspects) {\n            case 401:\n                return 'Prospect registration failed. Please input prospectname ';\n            case 402:\n                return 'Failed! invalid data types';\n            case 403:\n                return 'failed to register prospect because a prospect with the same name already exists';\n            default:\n                return 'unexpected error';\n        }\n    }\n    static getRequestParams(searchTitle, selLimit, status) {\n      let params = {};\n\n      if (searchTitle) {\n        params[\"q\"] = searchTitle;\n      }\n\n      if (selLimit) {\n        params[\"limit\"] = selLimit;\n      }\n      if (status) {\n          params[\"claim_status\"] = status;\n      }\n\n      return params;\n    }\n}"]}]}