{"remainingRequest":"/home/mulama/Desktop/NewFolder/osl/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mulama/Desktop/NewFolder/osl/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mulama/Desktop/NewFolder/osl/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mulama/Desktop/NewFolder/osl/src/views/Layout/DashboardLayout.vue?vue&type=template&id=21006813&","dependencies":[{"path":"/home/mulama/Desktop/NewFolder/osl/src/views/Layout/DashboardLayout.vue","mtime":1626853434311},{"path":"/home/mulama/Desktop/NewFolder/osl/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mulama/Desktop/NewFolder/osl/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/mulama/Desktop/NewFolder/osl/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mulama/Desktop/NewFolder/osl/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}