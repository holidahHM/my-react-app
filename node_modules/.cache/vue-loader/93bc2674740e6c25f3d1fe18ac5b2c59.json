{"remainingRequest":"/home/mulama/Desktop/Management/mgt2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mulama/Desktop/Management/mgt2/src/views/Layout/DashboardLayout.vue?vue&type=template&id=21006813&","dependencies":[{"path":"/home/mulama/Desktop/Management/mgt2/src/views/Layout/DashboardLayout.vue","mtime":1628485974813},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}