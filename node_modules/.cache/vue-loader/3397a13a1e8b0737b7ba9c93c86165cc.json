{"remainingRequest":"/home/mulama/Desktop/Management/mgt2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mulama/Desktop/Management/mgt2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mulama/Desktop/Management/mgt2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mulama/Desktop/Management/mgt2/src/views/Sites/CRM/Trustee_Actions/Set_Trustee_Allowance.vue?vue&type=template&id=457c6f1d&","dependencies":[{"path":"/home/mulama/Desktop/Management/mgt2/src/views/Sites/CRM/Trustee_Actions/Set_Trustee_Allowance.vue","mtime":1626848600950},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mulama/Desktop/Management/mgt2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}